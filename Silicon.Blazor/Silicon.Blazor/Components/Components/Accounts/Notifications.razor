@using Blazored.LocalStorage
@inject AuthenticationStateProvider authenticationStateProvider
@inject UserService userService
@inject ApplicationDbContext Context
@inject UserManager<ApplicationUser> UserManager
@inject DarkModeService DarkModeService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

@rendermode InteractiveServer


<div class="notifications @(isDarkMode ? "dark" : "notifications")">
    <div class="section-title">
        <h2>Notifications</h2>
        <div class="pref-email">
            <p>Preferred email for notifications</p>
            <input @bind="email" placeholder="example@gmail.com" />
        </div>
    </div>

    <div class="@GetSwitchState()">
        <label class="switch" for="switch-mode-1">
            <input type="checkbox" id="switch-mode-1" checked="@resetSwitch" @onchange="ToggleCheckbox" />
            <span class="slider round" id="slider"></span>
        </label>
        <div class="switch-text">
            <label>Subscribe to Newsletter</label>
            <p>Nec, posuere non felis duis massa vitae aliquet interdum scelerisque. Neque ullamcorper.</p>
        </div>
    </div>

    <div class="btn-switch2">
        <label class="switch-isDarkMode" for="switch-mode-2">
            <input class="input2" type="checkbox" id="switch-mode-2" checked="@isDarkMode" @onchange="ToggleDarkMode" />
            <span class="slider2 round2" id="slider"></span>
        </label>
        <div class="switch-text">
            <label>Use Dark Mode Theme in Application</label>
            <p>Tortor massa porttitor enim tristique neque fermentum sed.</p>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(infoMessage))
    {
        <p class="@(infoMessage == "OK" ? "alert-success" : infoMessage == "Exists" ? "alert-info" : infoMessage == "Error" ? "alert-danger" : "") w-50 text-lg-center">@GetMessageText(infoMessage)</p>
    }

    <div class="buttons">
        <button class="btn-gray">Cancel</button>
        <button class="btn-theme" @onclick="ToggleSettings">Save changes</button>
    </div>

</div>

@code {
    private string infoMessage = "";
    private bool resetSwitch;
    private bool isSubscribed;
    private bool isDarkMode;
    private string? email;

    #region DarkMode
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isDarkMode = await DarkModeService.UpdateDarkModeButtonSwitch();
            StateHasChanged();
        }
    }

    private async Task ToggleDarkMode(ChangeEventArgs e)
    {
        isDarkMode = (bool)e.Value!;
        await DarkModeService.SaveDarkModeSetting(isDarkMode);
        await InvokeAsync(StateHasChanged);
        NavigationManager.NavigateTo("/Account/Notifications");
    }
    #endregion
    
    #region Subscription
    private async Task ToggleSettings()
    {
        var userClaims = await userService.GetUserClaimsAsync();
        var response = await userService.ManageSubscription(isSubscribed, email!);

        if (response.StatusCode == StatusCode.OK)
        {
            isSubscribed = true;
            infoMessage = "OK";
            GetSwitchState();
            DisposeMessage();
        }
        else if (response.StatusCode == StatusCode.EXISTS)
        {
            infoMessage = "Exists";
            DisposeMessage();
        }
        else
        {
            resetSwitch = true;
            infoMessage = "Error";
            DisposeMessage();
            StateHasChanged();

            Timer timerSwitch = null!;
            timerSwitch = new Timer((state) =>
            {
                ResetSwitch();
                InvokeAsync(() => StateHasChanged());
                timerSwitch.Dispose();
            }, null, 10, Timeout.Infinite);
        }
    }

    private void DisposeMessage()
    {
        Timer timerMessage = null!;
        timerMessage = new Timer((state) =>
        {
            infoMessage = "";
            InvokeAsync(() => StateHasChanged());
            timerMessage.Dispose();
        }, null, 4000, Timeout.Infinite);
    }

    private void ResetSwitch()
    {
        resetSwitch = false;
    }

    private string GetSwitchState()
    {
        if (resetSwitch)
        {
            return "btn-reset-switch";
        }
        else
        {
            return "btn-switch";
        }
    }

    private void ToggleCheckbox()
    {
        isSubscribed = !resetSwitch;
    }

    private string GetMessageText(string message)
    {
        return message switch
        {
            "OK" => "You successfully subscribed to the newsletter!",
            "Exists" => "You have already subscribed.",
            "Error" => "Internal error, please try again later.",
            _ => ""
        };
    }
    #endregion
}
