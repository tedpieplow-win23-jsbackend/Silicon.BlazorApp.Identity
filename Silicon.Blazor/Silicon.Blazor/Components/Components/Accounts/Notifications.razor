@inject AuthenticationStateProvider authenticationStateProvider
@inject UserService userService

<div class="notifications">
        <div class="section-title">
            <h2>Notifications</h2>
            <div class="pref-email">
                <p>Preferred email for notifications</p>
                <input />
            </div>
        </div>

        <div class="btn-switch">
            <label>Light</label>
            <label class="switch" for="switch-mode">
                <input type="checkbox" id="switch-mode" />
                <span class="slider round" id="slider"></span>
            </label>
            <label>Dark</label>
            <p>Subscribe to Newsletter</p>
        </div>

        <div>
            <div class="btn-switch">
                <label>Light</label>
                <label class="switch" for="switch-mode">
                    <input type="checkbox" id="switch-mode" />
                    <span class="slider round" id="slider"></span>
                </label>
                <label>Dark</label>
                <p>Use Dark Mode Theme in Application</p>
            </div>
        </div>

        <div class="buttons">
            <button class="btn-gray">Cancel</button>
            <button class="btn-theme">Subscribe</button>
        </div>

    </div>

@code {
    private bool isSubscribed;

    private async Task<ClaimsPrincipal> GetUserClaimsAsync()
    {
        var authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
        return authenticationState.User;
    }

    private async Task ToggleSubscription()
    {
        var userClaims = await GetUserClaimsAsync();
        var response = await userService.ManageSubscription(isSubscribed, userClaims);

        if (response.StatusCode == StatusCode.OK)
        {

        }
        else
        {
            
        }
    }
}
