@using System.Text.Json
@using Azure.Messaging.ServiceBus
@using Microsoft.AspNetCore.Authorization
@using Silicon.Blazor.Data.Entities
@inject ICoursesVM ViewModel
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject UserService UserService
@inject ApplicationDbContext Context

@attribute [Authorize]
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Courses</PageTitle>

<section>
    <div class="courses container">

        <span id="statusMessage" class="message-container"></span>
        <div class="section-title">
            <h1 class="h1">Courses</h1>
            <div class="search-div">
                <div class="dropdown select">
                    <div class="selected" data-value="all">All categories<i class="fa-sharp fa-light fa-circle-caret-down"></i></div>
                    <div class="select-options">
                        <div class="option" data-value="all">All Categories</div>

                        @if (courses != null)
                        {
                            foreach (var course in courses)
                            {
                                @foreach (var category in course.Categories!)
                                {
                                    <div class="option" data-value="@category">
                                        @category
                                    </div>
                                }
                            }
                        }
                    </div>
                </div>
                <div class="search">
                    <input id="searchQuery" type="search" name="searchQuery" placeholder="Search courses" />
                    <i class="fa-sharp fa-solid fa-magnifying-glass"></i>
                </div>
            </div>
        </div>

        @if (courses != null)
        {
            <div class="items">

                @foreach (var course in courses!)
                {
                    <div class="course-card" @onclick="() => NavigateToCourseDetail(course!.Id)">
                        <div class="image">
                            <img src="@course.ImageUri" alt="" />

                            @if (course.IsBestseller)
                            {
                                <span class="best-seller">Best Seller</span>
                            }

                            <a class="bookmark" @onclick:stopPropagation="@true" @onclick="() => ToggleSaveCourseAsync(course.Id)">
                                <i class="fa-sharp fa-regular fa-bookmark" title="Bookmark Course" style="background-color: @course.BookmarkColor"></i>
                            </a>

                        </div>

                        <div class="course-info">
                            <h5 class="title">@course.Title</h5>
                            <p class="author">By @course.Author</p>

                            @if (course?.DiscountPrice != 0)
                            {
                                <div class="discount-div">
                                    <p class="discount-price">$ @course!.DiscountPrice</p>
                                    <p class="original-price">$ @course!.Price</p>
                                </div>
                            }
                            else
                            {
                                <p class="price">$ @course?.Price</p>
                            }

                        </div>
                        <div class="divider"></div>
                        <footer>
                            <div>
                                <i class="fa-sharp fa-solid fa-clock"></i>
                                <p>@course?.Hours hours</p>
                            </div>
                            <div>
                                <i class="fa-sharp fa-light fa-thumbs-up"></i>
                                <p>@course?.LikesInPercent % (@course?.LikesInNumbers K)</p>
                            </div>
                        </footer>
                    </div>
                }
            </div>
        }
        else
        {
            <p>Loading ...</p>
        }


    </div>
</section>

@code {
    private List<CourseCard>? courses;
    private List<CourseCard>? displayedCourses;
    private Pagination pagination = new Pagination();
    private string? courseId;

    protected override async Task OnInitializedAsync()
    {
        await GetCoursesAsync();
        await ColorBookmarkIfSaved();
    }

    private async Task GetCoursesAsync()
    {
        var query = new GraphQLQuery { Query = "{ getCourses { id title isBestseller categories title imageHeaderUri imageUri likesInPercent likes hours authors { name } prices { currency price discount } } }" };
        var response = await Http.PostAsJsonAsync(Configuration.GetValue<string>("ConnectionStrings:GetCoursesProvider"), query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            courses = result?.Data.GetProperty("getCourses").EnumerateArray()
            .Where(course => !string.IsNullOrEmpty(course.GetProperty("id").GetString()))
            .Select(course => new CourseCard
                {
                    Id = course.TryGetProperty("id", out var idValue) ? idValue.GetString() ?? "" : "",
                    Title = course.GetProperty("title").GetString(),
                    IsBestseller = course.GetProperty("isBestseller").GetBoolean(),
                    ImageHeaderUri = course.TryGetProperty("imageHeaderUri", out var imageUriValue) ? imageUriValue.GetString() ?? "" : "",
                    ImageUri = course.TryGetProperty("imageUri", out var imageUri) ? imageUri.GetString() ?? "" : "",
                    Author = course.TryGetProperty("authors", out var authors) && authors.GetArrayLength() > 0
                                                                        ? authors[0].GetProperty("name").GetString() ?? ""
                                                                        : "",
                    Price = $"{course.GetProperty("prices").GetProperty("currency").GetString()} {course.GetProperty("prices").GetProperty("price").GetDouble()}",
                    DiscountPrice = course.GetProperty("prices").GetProperty("discount").GetDecimal() > 0
                                                                                  ? course.GetProperty("prices").GetProperty("price").GetDecimal() - course.GetProperty("prices").GetProperty("discount").GetDecimal()
                                                                                  : 0m,
                    Hours = course.GetProperty("hours").GetString(),
                    LikesInPercent = course.GetProperty("likesInPercent").GetString(),
                    LikesInNumbers = course.GetProperty("likes").GetString(),
                    Categories = course.TryGetProperty("categories", out var categories) && categories.GetArrayLength() > 0
                                                                    ? categories.EnumerateArray().Select(cat => cat.GetString()).ToList()!
                                                                    : new List<string>()
                })
              .ToList();

            pagination.TotalItems = courses?.Count ?? 0;
            // UpdateDisplayedCourses();
        }
    }

    private void NavigateToCourseDetail(string courseId)
    {
        Navigation.NavigateTo($"/course/{courseId}");
    }

    private async Task SaveCourseAsync(string courseId)
    {
        var user = await UserService.GetUserAsync();

        if (user != null)
        {
            var userId = user.Id;

            var alreadySaved = await IsCourseSaved(userId, courseId);
            if (!alreadySaved)
            {
                try
                {
                    var userCourse = new UserCourse
                        {
                            ApplicationUserId = userId,
                            CourseId = courseId
                        };
                    Context.UserCourses.Add(userCourse);
                    await Context.SaveChangesAsync();

                    await ColorBookmarkIfSaved();
                }
                catch (Exception ex)
                {

                }
            }
        }
        return;
    }

    private async Task ToggleSaveCourseAsync(string courseId)
    {
        var user = await UserService.GetUserAsync();

        if (user != null)
        {
            var userId = user.Id;
            var isSaved = await IsCourseSaved(userId, courseId);

            if (isSaved)
            {
                await RemoveSavedCourse(userId, courseId);
            }
            else
            {
                await SaveCourseAsync(courseId);
            }

            await ColorBookmarkIfSaved();
        }
    }

    private async Task RemoveSavedCourse(string userId, string courseId)
    {
        var userCourse = await Context.UserCourses
            .FirstOrDefaultAsync(uc => uc.ApplicationUserId == userId && uc.CourseId == courseId);

        if (userCourse != null)
        {
            Context.UserCourses.Remove(userCourse);
            await Context.SaveChangesAsync();
        }
    }

    private async Task<bool> IsCourseSaved(string userId, string courseId)
    {
        var savedCourse = await Context.UserCourses
            .AnyAsync(uc => uc.ApplicationUserId == userId && uc.CourseId == courseId);

        return savedCourse;
    }

    private async Task ColorBookmarkIfSaved()
    {
        var user = await UserService.GetUserAsync();

        if (user != null && courses != null)
        {
            var userId = user.Id;

            var savedCourses = await Context.UserCourses
                .Where(uc => uc.ApplicationUserId == userId)
                .Select(uc => uc.CourseId)
                .ToListAsync();

            foreach (var course in courses)
            {
                course.IsSaved = savedCourses.Contains(course.Id);
                course.BookmarkColor = GetBookmarkColor(course.IsSaved);
            }
        }
    }

    private string GetBookmarkColor(bool isSaved)
    {
        return isSaved ? "#6366F1" : "white";
    }
}
