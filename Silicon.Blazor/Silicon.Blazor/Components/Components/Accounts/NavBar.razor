@inject UserService UserService 
@inject UserFactory UserFactory
@rendermode InteractiveServer


<div class="profile">
    @if (User != null)
    {
        <div class="profile">
            <div class="image">
                <img src="/images/profiles/@User.ProfileImageUrl" alt="@($"{User.FirstName} {User.LastName}")" />
                <form enctype="multipart/form-data" method="post">
                    <input id="fileUploader" type="file" name="file" hidden />
                    <label for="fileUploader" class="btn-upload"><i class="fa-regular fa-refresh"></i></label>
                </form>
            </div>
            <h5 class="user-name"> @User.FirstName @User.LastName</h5>
            <p>@User.Email</p>
        </div>
    }
    <nav class="options">
        <NavLink class=" menu-link" href="/Account/Details"><i class="fa-regular fa-gear"></i> Account Details
        </NavLink>
        <NavLink class=" menu-link" href="/Account/Security"><i class="fa-regular fa-lock"></i> Security
        </NavLink>
        <NavLink class="menu-link" href="/Account/Notifications"><i class="fa-regular fa-bell"></i> Notifications
        </NavLink>
        <NavLink class=" menu-link" href="/Account/Chat"><i class="fa-regular fa-envelope"></i> Messages
        </NavLink>
        <NavLink class="menu-link" href="/Account/MyCourses"><i class="fa-sharp fa-regular fa-bookmark"></i> Saved Courses
        </NavLink>
        <NavLink class="menu-link" href="/signout"><i class="fa-solid fa-right-from-bracket"></i> Sign Out
        </NavLink>
    </nav>
</div>

@code {
    [CascadingParameter]
    private ApplicationUser User { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        User = await UserService.GetUserAsync();
    }
}