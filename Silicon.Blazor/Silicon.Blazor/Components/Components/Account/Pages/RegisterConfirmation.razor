@page "/Account/RegisterConfirmation"
@rendermode InteractiveServer

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Silicon.Blazor.Data

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IConfiguration Configuration

<PageTitle>Register confirmation</PageTitle>

<section id="registerconfirmation">

    <div class="container">
        @if (!string.IsNullOrEmpty(StatusMessage))
        {
            <div class="alert alert-light w-50 text-lg-center">
                @StatusMessage
            </div>
        }

        <EditForm FormName="verifyform" Model="VerifyForm" OnValidSubmit="Verify" method="post" class="verify-form">
            <DataAnnotationsValidator />
            <h1>Verify your account</h1>
            <div class="form-content">

                <div class="input-field">
                    <div class="input-labels">
                        <label>Verify Code</label>
                    </div>
                    <InputText @bind-Value="VerifyForm.Code" />
                    <ValidationMessage For="() => VerifyForm.Code" class="text-danger" />
                </div>

            </div>
            <button class="btn-theme" type="submit">Verify code</button>
        </EditForm>

        <div class="resend">
            <p>Didn't receive an email?</p>
            <button class="btn-theme" @onclick="ResendCode">Resend code</button>
        </div>
    </div>
</section>

@code {
    [SupplyParameterFromQuery]
    private string? StatusMessage { get; set; }

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private VerifyFormModel VerifyForm { get; set; } = new VerifyFormModel();

    private async Task Verify()
    {
        var result = await Http.PostAsJsonAsync(Configuration.GetConnectionString("ValidateVerificationProvider"), new { Email = Email, Code = VerifyForm.Code });
        if (result.IsSuccessStatusCode)
        {
            var user = await UserManager.FindByEmailAsync(Email!);
            user!.EmailConfirmed = true;
            await UserManager.UpdateAsync(user);

            RedirectManager.RedirectTo("/signin");
        }
        else
        {
            StatusMessage = "Invalid code";
        }
    }

    private async Task ResendCode()
    {
        var result = await Http.PostAsJsonAsync("", new { Email = Email });
        if (result.IsSuccessStatusCode)
        {
            StatusMessage = "Code resent.";
        }
        else
        {
            StatusMessage = "Unable to resend code.";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Email is null)
        {
            RedirectManager.RedirectTo("/signup");
        }

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            StatusMessage = "Error finding user for unspecified email";
        }
    }
}
