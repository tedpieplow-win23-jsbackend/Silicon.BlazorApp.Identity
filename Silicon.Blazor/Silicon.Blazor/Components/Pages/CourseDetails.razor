@page "/course/{id}"

@inject IConfiguration Configuration

<AuthorizeView>
    <Authorized>
        <_CourseShowcase selectedCourse="selectedCourse" />
        <_CourseDetails selectedCourse="selectedCourse" />
    </Authorized>
</AuthorizeView>



@code {
    [Parameter]
    public string Id { get; set; } = null!;

    public CourseCardWithDetails selectedCourse;
    private bool ErrorMessage;

    protected override async Task OnInitializedAsync()
    {

        await GetCoursesWithGraphQLAsync();
    }

    private async Task<CourseCardWithDetails> GetCoursesWithGraphQLAsync()
    {
        var query = new GraphQLQuery
            {
                Query = @"
            query getCourseById($id: String!) {
                getCourseById(id: $id) {
                    id
                    imageUri
                    imageHeaderUri
                    isBestseller
                    isDigital
                    categories
                    title
                    ingress
                    starRating
                    reviews
                    likesInPercent
                    likes
                    hours
                    authors {
                      name
                    }
                    content {
                      description
                      includes
                      programDetails {
                        id
                        title
                        description
                      }
                    }
                    prices {
                      currency
                      price
                      discount
                    }
                  }
            }",
                Variables = new { id = $"{Id}" }
            };

        var response = await Http.PostAsJsonAsync(Configuration.GetValue<string>("ConnectionStrings:GetCoursesProvider"), query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();

            if (result != null && result.Data.TryGetProperty("getCourseById", out var courseData))
            {
                selectedCourse = new CourseCardWithDetails
                    {
                        Id = courseData.GetProperty("id").GetString() ?? "",
                        Hours = courseData.GetProperty("hours").GetString() ?? "",
                        ImageHeaderUri = courseData.GetProperty("imageHeaderUri").GetString() ?? "",
                        ImageUri = courseData.GetProperty("imageUri").GetString() ?? "",
                        Ingress = courseData.GetProperty("ingress").GetString() ?? "",
                        IsBestseller = courseData.GetProperty("isBestseller").GetBoolean(),
                        IsDigital = courseData.GetProperty("isDigital").GetBoolean(),
                        Likes = courseData.GetProperty("likes").GetString() ?? "",
                        LikesInPercent = courseData.GetProperty("likesInPercent").GetString() ?? "",
                        Reviews = courseData.GetProperty("reviews").GetString() ?? "",
                        StarRating = courseData.GetProperty("starRating").GetDecimal(),
                        Title = courseData.GetProperty("title").GetString() ?? "",
                        Authors = courseData.TryGetProperty("authors", out var authors) && authors.GetArrayLength() > 0
                                    ? authors.EnumerateArray().Select(a => new Author { Name = a.GetProperty("name").GetString() ?? "" }).ToList()
                                    : new List<Author>(),
                        Content = new Content
                        {
                            Description = courseData.GetProperty("content").GetProperty("description").GetString() ?? "",
                            Includes = courseData.TryGetProperty("content", out var content) && content.GetProperty("includes").GetArrayLength() > 0
                                            ? content.GetProperty("includes").EnumerateArray().Select(i => i.GetString()).ToList()!
                                            : new List<string>(),
                            ProgramDetails = courseData.TryGetProperty("content", out var contentDetails)
                                                && content.TryGetProperty("programDetails", out var programDetails)
                                                && programDetails.GetArrayLength() > 0
                                                    ? programDetails.EnumerateArray().Select(pd =>
                                                        new ProgramDetail
                                                        {
                                                            Id = pd.GetProperty("id").GetInt32(),
                                                            Description = pd.GetProperty("description").GetString() ?? "",
                                                            Title = pd.GetProperty("title").GetString() ?? ""
                                                        }).ToList()
                                                    : new List<ProgramDetail>()
                        },
                        Prices = new Prices
                        {
                            Currency = courseData.GetProperty("prices").GetProperty("currency").GetString() ?? "",
                            Discount = courseData.GetProperty("prices").GetProperty("discount").GetDecimal(),
                            Price = courseData.GetProperty("prices").GetProperty("price").GetDecimal()
                        }
                    };
            }
            else
            {
                ErrorMessage = true;
            }
        }
        return selectedCourse;
    }
}