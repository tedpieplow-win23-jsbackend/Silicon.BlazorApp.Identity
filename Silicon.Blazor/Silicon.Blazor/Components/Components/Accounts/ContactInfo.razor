@rendermode InteractiveServer

@inject ILogger<ContactInfo> Logger
@inject UserManager<ApplicationUser> UserManager
@inject UserFactory UserFactory
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject AuthenticationStateProvider StateProvider
@inject UserService UserService
@inject NavigationManager NavigationManager
@inject IServiceScopeFactory ScopeFactory


<EditForm FormName="ContactInfoForm" Model="ContactInfoModel" OnValidSubmit="UpdateBasicInfoAsync" method="post">
    <DataAnnotationsValidator />

    <div class="user-details">
        <div class="section-title">

            @if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <span class="alert alert-success" role="alert" id="userMessage">
                    @SuccessMessage
                </span>
            }
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <span class="alert alert-danger" role="alert" id="userMessage">
                    @ErrorMessage
                </span>
            }
            <h2>Account Details</h2>
            <h5>Basic Info</h5>
        </div>
        <div class="name">
            <div class="firstname">
                <div class="validation">
                    <label asp-for="Details.FirstName">First name</label>
                    <ValidationMessage For="() => ContactInfoModel.FirstName" />
                </div>
                <InputText @bind-Value="ContactInfoModel.FirstName" />
            </div>

            <div class="lastname">
                <div class="validation">
                    <label asp-for="Details.LastName">Last name</label>
                    <ValidationMessage For="() => ContactInfoModel.LastName" />
                </div>
                <InputText @bind-Value="ContactInfoModel.LastName" />
            </div>

        </div>
        <div class="contact-info">

            <div class="email">
                <div class="validation">
                    <label asp-for="Details.Email">Email Address</label>
                    <ValidationMessage For="() => ContactInfoModel.Email" />
                </div>
                <InputText @bind-Value="ContactInfoModel.Email" type="email" />
            </div>

            <div class="phone">
                <div class="validation">
                    <label asp-for="Details.Phone">Phone</label>
                    <ValidationMessage For="() => ContactInfoModel.Phone" />
                </div>
                <input @bind-value="ContactInfoModel.Phone" />
            </div>

        </div>
    </div>

    <div class="bio">
        <label asp-for="Details.Bio">Bio <span>(optional)</span></label>
        <InputTextArea @bind-Value="ContactInfoModel.Bio" />
        <div class="user-buttons">
            <NavLink href="/account/details" class="btn-gray">Cancel</NavLink>
            <button type="submit" class="btn-theme" id="knappen">Save Changes</button>
        </div>
    </div>

</EditForm>

@code {

    private string? SuccessMessage;
    private string? ErrorMessage;

    [SupplyParameterFromForm]
    private ContactInfoVM ContactInfoModel { get; set; } = new();

    [CascadingParameter]
    private ApplicationUser User { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        User = await UserService.GetUserAsync();

        if (User != null)
        {
            ContactInfoModel = UserFactory.PopulateContactInfo(User);
        }
    }

    private async Task UpdateBasicInfoAsync()
    {
        try
        {
            var userToUpdate = UserFactory.PopulateUserEntity(ContactInfoModel, User);
            var result = await UserService.UpdateUserAsync(userToUpdate);

            if (result.Succeeded)
            {
                SuccessMessage = "Contact information updated successfully!";
                DisposeMessage();
            }
            else
            {
                ErrorMessage = "Contact information failed to update.";
                DisposeMessage();
            }
        }
        catch(Exception ex)
        {
            Logger.LogError($"UpdateBasicInfo ERROR: {ex.Message}");
        }
    }

    private void DisposeMessage()
    {
        Timer timerMessage = null!;
        timerMessage = new Timer((state) =>
        {
            SuccessMessage = "";
            ErrorMessage = "";
            InvokeAsync(() => StateHasChanged());
            timerMessage.Dispose();
        }, null, 4000, Timeout.Infinite);
    }

}
