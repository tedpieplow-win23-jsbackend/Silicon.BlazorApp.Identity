@page "/signup"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserFactory UserFactory

<PageTitle>Sign up</PageTitle>

<section id="signup">
    <div class="container">

        @if (!string.IsNullOrEmpty(StatusMessage))
        {
            <div class="alert alert-danger">
                @StatusMessage
            </div>
        }

        <EditForm FormName="signupform" Model="SignUpForm" OnValidSubmit="SignUp" method="post"novalidate>
            <h1>Create Account</h1>
            <p>Already have an account? <NavLink href="/signin">Sign in here</NavLink></p>

            <div class="form-content">
                <div class="form-name">

                    <div id="form-firstname" class="input-field">
                        <div class="input-labels">
                            <label>First name</label>
                            <ValidationMessage For="() => SignUpForm.FirstName" class="text-danger" />
                        </div>
                        <InputText @bind-Value="SignUpForm.FirstName" />
                    </div>

                    <div id="form-lastname" class="input-field">
                        <div class="input-labels">
                            <label>Last Name</label>
                            <ValidationMessage For="() => SignUpForm.LastName" class="text-danger" />
                        </div>
                        <InputText @bind-Value="SignUpForm.LastName" />
                    </div>

                </div>

                <div id="form-email" class="input-field">
                    <div class="input-labels">
                        <label>Email</label>
                        <ValidationMessage For="() => SignUpForm.Email" class="text-danger" />
                    </div>
                    <InputText @bind-Value="SignUpForm.Email" type="email" />
                </div>

                <div id="form-password" class="input-field">
                    <div class="input-labels">
                        <label>Password</label>
                        <ValidationMessage For="() => SignUpForm.Password" class="text-danger" />
                    </div>
                    <InputText @bind-Value="SignUpForm.Password" type="password" />
                </div>

                <div id="form-confirm" class="input-field">
                    <div class="input-labels">
                        <label>Confirm Password</label>
                        <ValidationMessage For="() => SignUpForm.ConfirmPassword" class="text-danger" />
                        <InputText @bind-Value="SignUpForm.ConfirmPassword" type="password"/>
                    </div>
                    <input asp-for="Form.ConfirmPassword" />
                </div>

                <div id="form-terms" class="checkbox">
                    <InputCheckbox @bind-Value="SignUpForm.TermsAndConditions" />
                    <label>I agree to the terms and conditions</label>
                    <ValidationMessage For="() => SignUpForm.TermsAndConditions" class="text-danger" />
                </div>

            </div>
            <button class="btn-theme" type="submit">Sign Up</button>
        </EditForm>
    </div>
</section>


@code {
    [SupplyParameterFromQuery]
    private string? StatusMessage { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    [SupplyParameterFromForm]
    private SignUpModel SignUpForm { get; set; } = new();

    public async Task SignUp(EditContext editContext)
    {
        var user = await UserFactory.PopulateUserEntity(SignUpForm);

        var result = await UserManager.CreateAsync(user, SignUpForm.Password);
        if (!result.Succeeded)
        {
            StatusMessage = "Unable to register account. Please try again.";
            return;
        }

        HttpClient http = new HttpClient();
        await http.PostAsJsonAsync("", SignUpForm);

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = SignUpForm.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);

    }
}