@using Blazored.LocalStorage
@using System.Text
@inject AuthenticationStateProvider authenticationStateProvider
@inject UserService userService
@inject ApplicationDbContext Context
@inject UserManager<ApplicationUser> UserManager
@inject DarkModeService DarkModeService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject SubscriptionService Subscription
@inject HttpClient Http


@rendermode InteractiveServer


<div class="notifications @(isDarkMode ? "dark" : "notifications")">
    <div class="section-title">
        <h2>Notifications</h2>
        <div class="pref-email">
            <p>Preferred email for notifications</p>
            <InputText @bind-Value="email" placeholder="example@gmail.com" />
        </div>
    </div>

    <div class="@GetSwitchState()">
        <label class="switch" for="switch-mode-1">
            <input type="checkbox" id="switch-mode-1" @bind="isSubscribed" />
            <span class="slider round" id="slider"></span>
        </label>
        <div class="switch-text">
            <label>Subscribe to Newsletter</label>
            <p>Nec, posuere non felis duis massa vitae aliquet interdum scelerisque. Neque ullamcorper.</p>
        </div>
    </div>

    <div class="btn-switch2">
        <label class="switch-isDarkMode" for="switch-mode-2">
            <input class="input2" type="checkbox" id="switch-mode-2" checked="@isDarkMode" @onchange="ToggleDarkMode" />
            <span class="slider2 round2" id="slider"></span>
        </label>
        <div class="switch-text">
            <label>Use Dark Mode Theme in Application</label>
            <p>Tortor massa porttitor enim tristique neque fermentum sed.</p>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(infoMessage))
    {
        <p class="@(infoMessage == "OK" ? "alert-success" : infoMessage == "Exists" ? "alert-info" : infoMessage == "Error" ? "alert-danger" : "") w-50 text-lg-center">@GetMessageText(infoMessage)</p>
    }

    <div class="buttons">
        <a class="btn-gray" href="/Account/Details" >Cancel</a>
        <button class="btn-theme" @onclick="ToggleSettings">Save changes</button>
    </div>

</div>

@code {
    private string infoMessage = "";
    private bool resetSwitch;
    private bool isSubscribed;
    private bool isDarkMode;
    private string? email;

    #region DarkMode
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isDarkMode = await DarkModeService.UpdateDarkModeButtonSwitch();
            StateHasChanged();
        }
    }

    // Kanske måste sätta in metoden i OnAfterRenderAsync()
    protected override async Task OnInitializedAsync()
    {
        isSubscribed = await CheckIfUserIsSubscribedAsync();
    }

    private async Task ToggleDarkMode(ChangeEventArgs e)
    {
        isDarkMode = (bool)e.Value!;
        await DarkModeService.SaveDarkModeSetting(isDarkMode);
        await InvokeAsync(StateHasChanged);
        NavigationManager.NavigateTo("/Account/Notifications");
    }
    #endregion

    #region Subscription
    private async Task<bool> CheckIfUserIsSubscribedAsync()
    {
        var user = await userService.GetUserAsync();
        if (email == null)
        {
            email = user.Email;
        }

        isSubscribed = await Subscription.CheckSubscription(email!);
        if (isSubscribed)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    private async Task ToggleSettings()
    {
        // var userClaims = await userService.GetUserClaimsAsync();
        var user = await userService.GetUserAsync();
        if (email != user.Email)
        {
            var requestData = new { Email = email };
            var jsonContent = JsonConvert.SerializeObject(requestData);
            var content = new StringContent(jsonContent, Encoding.UTF8, "appliction/json");
            var httpResponse = await Http.PostAsync("https://subscriptionprovider-silicon.azurewebsites.net/api/SubscribeFunction?code=-aN4VeTZphDS5C4POoEP-Nycz7KCqohb6lnUmFj36o8uAzFuiGfTow==", content);
            if (httpResponse.IsSuccessStatusCode)
            {
                infoMessage = "OK";
            }
            return;
        }

        var response = await userService.ManageSubscription(isSubscribed, email!);


        if (response.StatusCode == StatusCode.OK)
        {
            isSubscribed = response.IsSubscribed!.Value;
            infoMessage = "OK";
            GetSwitchState();
            DisposeMessage();
            NavigationManager.NavigateTo("/account/notifications");
        }
        else if (response.StatusCode == StatusCode.EXISTS)
        {
            isSubscribed = response.IsSubscribed!.Value;
            infoMessage = "Exists";
            DisposeMessage();
        }
        else
        {
            resetSwitch = true;
            infoMessage = "Error";
            DisposeMessage();

            Timer timerSwitch = null!;
            timerSwitch = new Timer((state) =>
            {
                ResetSwitch();
                InvokeAsync(() => StateHasChanged());
                timerSwitch.Dispose();
            }, null, 10, Timeout.Infinite);
        }
        StateHasChanged();
    }

    private void DisposeMessage()
    {
        Timer timerMessage = null!;
        timerMessage = new Timer((state) =>
        {
            infoMessage = "";
            InvokeAsync(() => StateHasChanged());
            timerMessage.Dispose();
        }, null, 4000, Timeout.Infinite);
    }

    private void ResetSwitch()
    {
        resetSwitch = false;
    }

    private string GetSwitchState()
    {
        if (resetSwitch)
        {
            return "btn-reset-switch";
        }
        else
        {
            return "btn-switch";
        }
    }

    private string GetMessageText(string message)
    {
        return message switch
        {
            "OK" => "Changes updated",
            "Exists" => "Changes updated",
            "Error" => "Internal error, please try again later.",
            _ => "Internal error, please try again later."
        };
    }
    #endregion
}
