@using Newtonsoft.Json
@using Silicon.Blazor.Models
@using Silicon.Blazor.ViewModels.Home
@using System.ComponentModel.DataAnnotations
@using System.Net
@inject UserService UserService
@inject UserManager<ApplicationUser> UserManager
@inject HttpClient Http
@inject ApplicationDbContext Context
@rendermode InteractiveServer
<section id="newsletter" class="newsletter">
    <div class="container">
        <div class="top">
            <h1>@Model.NewsletterTitle.Title</h1>
            <img src="@Model.NewsletterImage.ImageUrl" alt="@Model.NewsletterImage.AltText" />
        </div>
        <EditForm FormName="subscribeform" Model="SubscribeForm" OnValidSubmit="OnSubmit" id="subscribe-form" method="post" novalidate>
            <DataAnnotationsValidator />
            <div class="checkbox-content">
                <div class="news-title">
                    <h5>@Model.NewsletterTitle.Subtitle</h5>
                </div>
                <div class="checkboxes">
                    <div class="box">
                        <InputCheckbox @bind-Value="SubscribeForm.AdvertisingUpdates" />
                        <label>Advertising Updates</label>
                    </div>
                    <div class="box">
                        <InputCheckbox @bind-Value="SubscribeForm.DailyNewsLetter" />
                        <label>Daily newsletter</label>
                    </div>
                    <div class="box">
                        <InputCheckbox @bind-Value="SubscribeForm.EventUpdates" />
                        <label>Event Updates</label>
                    </div>
                    <div class="box">
                        <InputCheckbox @bind-Value="SubscribeForm.Podcasts" />
                        <label>Podcasts</label>
                    </div>
                    <div class="box">
                        <InputCheckbox @bind-Value="SubscribeForm.StartupsWeekly" />
                        <label>Startups Weekly</label>
                    </div>
                    <div class="box">
                        <InputCheckbox @bind-Value="SubscribeForm.WeekInReviews" />
                        <label>Week In Reviews</label>
                    </div>
                </div>
            </div>
            <div class="subscribe">
                <InputText @bind-Value="SubscribeForm.Email" id="input-email" type="email" placeholder="Your Email" />
                <button id="submit-button" type="submit" class="btn-theme"><span>* Subscribe</span></button>
                <ValidationMessage For="() => SubscribeForm.Email" class="text-danger" />
            </div>
        </EditForm>
        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="alert alert-success w-50 text-lg-center" style="margin:5px">
                @SuccessMessage
            </div>
        }
        else if (!string.IsNullOrEmpty(ErrorMessage))
        {
            <div class="alert alert-danger w-50 text-lg-center" style="margin:5px">
                @ErrorMessage
            </div>
        }
    </div>
</section>


@code {
    [SupplyParameterFromForm]
    public SubscribeFormModel SubscribeForm { get; set; } = new();

    [SupplyParameterFromQuery]
    public string SuccessMessage { get; set; } = "";

    [SupplyParameterFromQuery]
    public string ErrorMessage { get; set; } = "";

    public async Task OnSubmit()
    {
        try
        {
            var user = await UserService.GetUserAsync();
            var result = await Http.PostAsJsonAsync("https://subscriptionprovider-silicon.azurewebsites.net/api/SubscribeFunction?code=-aN4VeTZphDS5C4POoEP-Nycz7KCqohb6lnUmFj36o8uAzFuiGfTow==", SubscribeForm);
            if (result.IsSuccessStatusCode)
            {
                user.IsSubscribed = true;
                SubscribeForm = new SubscribeFormModel();
                SuccessMessage = "You have been subscribed!";
                DisposeMessage();
            }
            else if (result.StatusCode == HttpStatusCode.Conflict)
            {
                SubscribeForm = new SubscribeFormModel();
                ErrorMessage = "This subscriber already exists!";
                DisposeMessage();
            }
            else if (result.StatusCode == HttpStatusCode.BadRequest)
            {
                SubscribeForm = new SubscribeFormModel();
                ErrorMessage = "Skriv rätt";
                DisposeMessage();
            }
        }
        catch
        {
            SubscribeForm = new SubscribeFormModel();
            ErrorMessage = "Something went wrong. Try again later";
        }
    }

    private void DisposeMessage()
    {
        Timer timerMessage = null!;
        timerMessage = new Timer((state) =>
        {
            SuccessMessage = "";
            ErrorMessage = "";
            InvokeAsync(() => StateHasChanged());
            timerMessage.Dispose();
        }, null, 4000, Timeout.Infinite);
    }

    NewsletterModel Model { get; set; } = new NewsletterModel();
}
