@using System.Text.Json
@using Azure.Messaging.ServiceBus
@inject ICoursesVM ViewModel
@inject IConfiguration Configuration

@attribute [StreamRendering]

<PageTitle>Courses</PageTitle>

<section>
    <div class="courses container">
        @*There's a script tied to this span*@
        <span id="statusMessage" class="message-container"></span>
        <div class="section-title">
            <h1 class="h1">Courses</h1>
            <div class="search-div">
                <div class="dropdown select">
                    <div class="selected" data-value="all">All categories<i class="fa-sharp fa-light fa-circle-caret-down"></i></div>
                    <div class="select-options">

                        <div class="option" data-value="all">All Categories</div>

                        @*  @if (courses.Categories != null)
                        {
                        foreach (var category in courses.Categories)
                        {
                        <div class="option" data-value="(@category.CategoryName)">@category.CategoryName</div>
                        }
                        } *@

                    </div>
                </div>
                <div class="search">
                    <input id="searchQuery" type="search" name="searchQuery" placeholder="Search courses" />
                    <i class="fa-sharp fa-solid fa-magnifying-glass"></i>
                </div>
            </div>
        </div>

        @if (courses != null)
        {
            <div class="items">

                @foreach (var course in courses!)
                {
                    <div class="course-card" @* @onclick="() => ViewModel.GoToCourseDetails(course.Id) *@">
                        <div class="image">
                            <img src="@course.ImageUri" alt="" />

                            @if (course.IsBestseller)
                            {
                                <span class="best-seller">Best Seller</span>
                            }

                            @*   <NavLink href="#" data-course-id="@course.Id" class="bookmark" @onclick="() => course.SaveCourse(course.Id)"> <i class="fa-sharp fa-regular fa-bookmark" title="Join Course"></i></NavLink> *@
                        </div>

                        <div class="course-info">
                            <h5 class="title">@course.Title</h5>
                            <p class="author">By @course.Author</p>

                            @if (course?.DiscountPrice != 0)
                            {
                                <div class="discount-div">
                                    <p class="discount-price">$ @course!.DiscountPrice</p>
                                    <p class="original-price">$ @course!.Price</p>
                                </div>
                            }
                            else
                            {
                                <p class="price">$ @course?.Price</p>
                            }

                        </div>
                        <div class="divider"></div>
                        <footer>
                            <div>
                                <i class="fa-sharp fa-solid fa-clock"></i>
                                <p>@course?.Hours hours</p>
                            </div>
                            <div>
                                <i class="fa-sharp fa-light fa-thumbs-up"></i>
                                <p>@course?.LikesInPercent % (@course?.LikesInNumbers K)</p>
                            </div>
                        </footer>
                    </div>
                }
            </div>
        }

        @*        if (courses.GetConnectionFailedStatus())
        {
        <span class="alert alert-danger">Failed to contact server. Please try again later...</span>
        } *@

    </div>
</section>


@code {
    private List<CourseCard>? courses;
    private Pagination pagination;

    protected override async Task OnInitializedAsync()
    {  
        var query = new GraphQLQuery { Query = "{ getCourses { id title isBestseller categories title imageHeaderUri imageUri likesInPercent likes hours authors { name } prices { currency price discount } } }" };
        var response = await Http.PostAsJsonAsync(Configuration.GetValue<string>("ConnectionStrings:GetCoursesProvider"), query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            courses = result?.Data.GetProperty("getCourses").EnumerateArray()
            .Where(course => !string.IsNullOrEmpty(course.GetProperty("id").GetString()))
            .Select(course => new CourseCard
                {
                    Id = course.TryGetProperty("id", out var idValue) ? idValue.GetString() ?? "" : "",
                    Title = course.GetProperty("title").GetString(),
                    IsBestseller = course.GetProperty("isBestseller").GetBoolean(),
                    ImageHeaderUri = course.TryGetProperty("imageHeaderUri", out var imageUriValue) ? imageUriValue.GetString() ?? "" : "",
                    ImageUri = course.TryGetProperty("imageUri", out var imageUri) ? imageUri.GetString() ?? "" : "",
                    Author = course.TryGetProperty("authors", out var authors) && authors.GetArrayLength() > 0
                        ? authors[0].GetProperty("name").GetString() ?? ""
                        : "",
                    Price = $"{course.GetProperty("prices").GetProperty("currency").GetString()} {course.GetProperty("prices").GetProperty("price").GetDouble()}",
                    DiscountPrice = course.GetProperty("prices").GetProperty("discount").GetDecimal() > 0
                                  ? course.GetProperty("prices").GetProperty("price").GetDecimal() - course.GetProperty("prices").GetProperty("discount").GetDecimal()
                                  : 0m,
                    Hours = course.GetProperty("hours").GetString(),
                    LikesInPercent = course.GetProperty("likesInPercent").GetString(),
                    LikesInNumbers = course.GetProperty("likes").GetString()
                })
              .ToList();
        }

        pagination = new Pagination
            {
                TotalPages = 3,
                CurrentPage = 1,
                PageSize = 3
            };
    }

    public class Pagination
    {
        public int TotalPages { get; set; }
        public int CurrentPage { get; set; }
        public int PageSize { get; set; }
    }
}
@*
@await Html.PartialAsync("_FilterAndQueryPartial")
@await Html.PartialAsync("_SaveCourseAndMessage")
*@