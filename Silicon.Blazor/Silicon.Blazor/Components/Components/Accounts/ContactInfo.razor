@using Microsoft.EntityFrameworkCore
@rendermode InteractiveAuto
@inject UserManager<ApplicationUser> UserManager
@inject UserFactory UserFactory
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject AuthenticationStateProvider StateProvider
@inject UserService UserService

<EditForm FormName="AccountDetailsForm" Model="ContactInfoModel" OnValidSubmit="UpdateBasicInfo" method="post">
    <DataAnnotationsValidator />

    <div class="user-details">
        <div class="section-title">

            @if (!string.IsNullOrEmpty(SuccessMessage))
            {
                <span class="alert alert-success" role="alert" id="userMessage">
                    SuccessMessage
                </span>
            }
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <span class="alert alert-danger" role="alert" id="userMessage">
                    ErrorMessage
                </span>
            }
            <h2>Account Details</h2>
            <h5>Basic Info</h5>
        </div>
        <div class="name">
            <div class="firstname">
                <div class="validation">
                    <label asp-for="Details.FirstName">First name</label>
                    <ValidationMessage For="() => ContactInfoModel.FirstName" />
                </div>
                <InputText @bind-Value="ContactInfoModel.FirstName" />
            </div>

            <div class="lastname">
                <div class="validation">
                    <label asp-for="Details.LastName">Last name</label>
                    <ValidationMessage For="() => ContactInfoModel.LastName" />
                </div>
                <InputText @bind-Value="ContactInfoModel.LastName" />
            </div>

        </div>
        <div class="contact-info">

            <div class="email">
                <div class="validation">
                    <label asp-for="Details.Email">Email Address</label>
                    <ValidationMessage For="() => ContactInfoModel.Email" />
                </div>
                <InputText @bind-Value="ContactInfoModel.Email" type="email" />
            </div>

            <div class="phone">
                <div class="validation">
                    <label asp-for="Details.Phone">Phone</label>
                    <ValidationMessage For="() => ContactInfoModel.Phone" />
                </div>
                <input @bind-value="ContactInfoModel.Phone" />
            </div>

        </div>
    </div>

    <div class="bio">
        <label asp-for="Details.Bio">Bio <span>(optional)</span></label>
        <InputTextArea @bind-Value="ContactInfoModel.Bio" />
        <div class="user-buttons">
            <NavLink href="/account/details" class="btn-gray">Cancel</NavLink>
            <button type="submit" class="btn-theme" id="knappen">Save Changes</button>
        </div>
    </div>

</EditForm>

@code {

    private string? SuccessMessage;
    private string? ErrorMessage;

    [SupplyParameterFromForm]
    private ContactInfoVM ContactInfoModel { get; set; } = new();

    [CascadingParameter]
    private ApplicationUser User { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        User = await UserService.GetUserAsync();

        if (User != null)
        {
            ContactInfoModel = UserFactory.PopulateContactInfo(User);
        }
    }

    private async Task UpdateBasicInfo()
    {
        var model = ContactInfoModel;

        //Denna (userToUpdate) får in alla värden rätt, när jag körde UserManager.UpdateAsync så disposea den bara :(.. Hitta en bra lösning!
        var userToUpdate = UserFactory.PopulateUserEntity(model, User);



        //Det här behövs inte men behöll om du hade tänkt använda något av det!
        // var FirstName = ContactInfoModel.FirstName;
        // var LastName = ContactInfoModel.LastName;
        // var Email = ContactInfoModel.Email;
        // var Phone = ContactInfoModel.Phone;
        // var Bio = ContactInfoModel.Bio;

        // User = await UserAccessor.GetRequiredUserAsync(HttpContext);
        // var model = new ContactInfoVM
        // {
        //         FirstName = FirstName,
        //         LastName = LastName,
        //         Email = Email,
        //         Phone = Phone,
        //         Bio = Bio
        // };
        // var userToUpdate = UserFactory.PopulateUserEntity(model, User);
        // var result = await UserManager.UpdateAsync(userToUpdate);

        // RedirectManager.RedirectTo("/account/details");
    }

}
