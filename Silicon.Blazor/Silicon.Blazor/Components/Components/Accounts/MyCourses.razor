@inject UserService UserService
@inject ApplicationDbContext Context
@inject IConfiguration Configuration
@inject NavigationManager Navigation
@inject UserService UserService
@inject IDbContextFactory DbContextFactory

@rendermode InteractiveServer

<section id="saved-courses">
    <div class="container">

        <div class="content">
            <div class="section-title">
                <h2>Saved Items</h2>
                <button class="btn-delete" @onclick="() => RemoveAllCourses()"><p><i class="fa-solid fa-trash-can"></i>Delete all</p></button>
            </div>

            <div class="saved-items">
                @if (savedCourses != null && savedCourses.Count() > 0)
                {

                    @foreach (var course in savedCourses)
                    {
                        <div class="course-card" @onclick="() => NavigateToCourseDetail(course!.Id)">
                            <div class="image">
                                <img src="@course.ImageUri" />
                            </div>

                            <a class="bookmark" @onclick:stopPropagation="@true" @onclick="() => RemoveSavedCourse(course.Id)" title=" Remove Course">
                                <i class="fa-solid fa-bookmark"></i>
                            </a>

                            <div class="course-info">
                                <h5 class="title">@course.Title</h5>
                                <p class="author">By @course.Author</p>
                                <p class="price">$@course.Price</p>
                                <div class="divider"></div>
                            </div>
                            <div class="bottom">
                                <div>
                                    <i class="fa-sharp fa-solid fa-clock"></i>
                                    <p>@course.Hours hours</p>
                                </div>
                                <div>
                                    <i class="fa-sharp fa-light fa-thumbs-up"></i>
                                    <p>@course.LikesInPercent</p>
                                    <p>@course.LikesInNumbers</p>
                                </div>
                            </div>
                        </div> <!-- Här är stängningen av course-card -->
                    }
                }
                else
                {
                    <div class="no-courses">
                        <h5>You don't have any saved courses yet.</h5>
                        <p>Visit our <NavLink href="/courses">course</NavLink> page and find out what you're missing!</p>
                    </div>
                }
            </div>
        </div>
    </div>
</section>

@code {
    private static readonly SemaphoreSlim _dbSemaphore = new SemaphoreSlim(1, 1);
    private List<CourseCard>? savedCourses;
    private List<string>? savedCourseIds;
    private bool updatePage = false;

    protected override async Task OnInitializedAsync()
    {
        await _dbSemaphore.WaitAsync();
        try
        {
            savedCourseIds = await GetSavedCourseIdsAsync();
            if (savedCourseIds != null && savedCourseIds.Count > 0)
                await GetCoursesWithGraphQLQuery(savedCourseIds);
        }
        finally
        {
            _dbSemaphore.Release();
        }

    }

    private async Task<List<string>> GetSavedCourseIdsAsync()
    {
        using var context = DbContextFactory.CreateDbContext();
        var user = await UserService.GetUserAsync();

        if (user != null)
        {
            var userId = user.Id;
            var savedCourseIds = await context.UserCourses
                    .Where(sc => sc.ApplicationUserId == userId)
                    .Select(sc => sc.CourseId)
                    .ToListAsync();
            return savedCourseIds;
        }
        return new List<string>();
    }

    private async Task GetCoursesWithGraphQLQuery(List<string> savedCourseIds)
    {
        var query = new GraphQLQuery
            {
                Query = @"
            query getCoursesByIds($ids: [String!]!) {
                getCoursesByIds(ids: $ids) {
                    id
                    imageUri
                    imageHeaderUri
                    isBestseller
                    isDigital
                    categories
                    title
                    ingress
                    starRating
                    reviews
                    likesInPercent
                    likes
                    hours
                    authors {
                      name
                    }
                    content {
                      description
                      includes
                      programDetails {
                        id
                        title
                        description
                      }
                    }
                    prices {
                      currency
                      price
                      discount
                    }
                  }
            }",
                Variables = new { ids = savedCourseIds }
            };
        var response = await Http.PostAsJsonAsync(Configuration.GetValue<string>("ConnectionStrings:GetCoursesProvider"), query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQLResponse>();
            savedCourses = result?.Data.GetProperty("getCoursesByIds").EnumerateArray()
            .Where(course => !string.IsNullOrEmpty(course.GetProperty("id").GetString()))
            .Select(course => new CourseCard
                {
                    Id = course.TryGetProperty("id", out var idValue) ? idValue.GetString() ?? "" : "",
                    Title = course.GetProperty("title").GetString(),
                    IsBestseller = course.GetProperty("isBestseller").GetBoolean(),
                    ImageHeaderUri = course.TryGetProperty("imageHeaderUri", out var imageUriValue) ? imageUriValue.GetString() ?? "" : "",
                    ImageUri = course.TryGetProperty("imageUri", out var imageUri) ? imageUri.GetString() ?? "" : "",
                    Author = course.TryGetProperty("authors", out var authors) && authors.GetArrayLength() > 0
                                                                ? authors[0].GetProperty("name").GetString() ?? ""
                                                                : "",
                    Price = $"{course.GetProperty("prices").GetProperty("currency").GetString()} {course.GetProperty("prices").GetProperty("price").GetDouble()}",
                    DiscountPrice = course.GetProperty("prices").GetProperty("discount").GetDecimal() > 0
                                                                 ? course.GetProperty("prices").GetProperty("price").GetDecimal() - course.GetProperty("prices").GetProperty("discount").GetDecimal()
                                                                 : 0m,
                    Hours = course.GetProperty("hours").GetString(),
                    LikesInPercent = course.GetProperty("likesInPercent").GetString(),
                    LikesInNumbers = course.GetProperty("likes").GetString(),
                    Categories = course.TryGetProperty("categories", out var categories) && categories.GetArrayLength() > 0
                                                                ? categories.EnumerateArray().Select(cat => cat.GetString()).ToList()!
                                                                : new List<string>()
                })
              .ToList();
        }
        return;
    }

    private void NavigateToCourseDetail(string courseId)
    {
        Navigation.NavigateTo($"/course/{courseId}");
    }

    private async Task RemoveSavedCourse(string courseId)
    {
        using var context = DbContextFactory.CreateDbContext();
        var user = await UserService.GetUserAsync();

        if (user != null)
        {
            var userId = user.Id;
            var userCourse = await context.UserCourses
            .FirstOrDefaultAsync(uc => uc.ApplicationUserId == userId && uc.CourseId == courseId);

            if (userCourse != null)
            {
                context.UserCourses.Remove(userCourse);
                await Context.SaveChangesAsync();

                savedCourses?.RemoveAll(c => c.Id == courseId);
                updatePage = true;
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task RemoveAllCourses()
    {
        using var context = DbContextFactory.CreateDbContext();
        var user = await UserService.GetUserAsync();

        if (user != null)
        {
            var userId = user.Id;
            var userCourses = await context.UserCourses
                .Where(uc => uc.ApplicationUserId == userId)
                .ToListAsync();

            if (userCourses.Count > 0)
            {
                context.UserCourses.RemoveRange(userCourses);
                await context.SaveChangesAsync();

                savedCourses?.Clear();

                updatePage = true;
                await InvokeAsync(StateHasChanged); 
            }
        }
    }
}
